pipeline {
    agent any

    environment {
        ENVIRONMENT = "dev"
        NICKNAME = "petstore"
        CREDENTIALS = "756143471679_UserFull"
        AWS_REGION = "cn-north-1"
        COMPONENTS = "common_infra,lambda_layers,frontend"
        ECR_REGISTRY="756143471679.dkr.ecr.cn-north-1.amazonaws.com.cn"
        TF_IMAGE="756143471679.dkr.ecr.cn-north-1.amazonaws.com.cn/terraform:1.3.4"
    }

    stages {
        stage("Prepare Environment") {
            steps {
                script {
                    def timestamps = sh(script: "echo `date +%s`", returnStdout: true).trim()
                    def tag = "${timestamps}.${env.BUILD_NUMBER}"
                    writeFile(file: "tag.txt", text: tag)
                }
                withAWS(credentials: "${env.CREDENTIALS}", region: "${env.AWS_REGION}") {
                    catchError(message: "Failed to authenticate to AWS", stageResult: "FAILURE") {
                        sh """
                            ./scripts/ci/generate_cred.sh ${env.CREDENTIALS}
                            ./scripts/ci/ecr_login.sh ${env.ECR_REGISTRY}
                        """
                    }
                }
            }
        }

        stage("Format & Validate") {
            steps {
                catchError(message: "Failed to format and validate terraform", stageResult: "FAILURE") {
                    sh "./scripts/ci/validate.sh"
                }
            }
        }


        stage("Deploy") {
            steps {
                script {
                    COMPONENTS.split(",").each {component ->
                        stage("${component}") {
                            catchError(message: "Failed to deploy ${component}", stageResult: "FAILURE") {
                                if ("${component}" == 'lambda_layers') {
                                    sh "./scripts/ci/package.sh"
                                }
                                sh """
                                    mkdir -p ${WORKSPACE}/.terraform.d/plugin-cache
                                    rm -f ${WORKSPACE}/terraform/deployment/${component}/.terraform.lock.hcl
                                    ./scripts/ci/init.sh ${component} ${env.ENVIRONMENT}
                                    ./scripts/ci/plan.sh ${component} ${env.ENVIRONMENT}
                                    ./scripts/ci/apply.sh ${component}
                                """
                            }
                        }
                    }
                }
            }
        }
    }
    post {
        // Clean after build
        always {
            cleanWs(cleanWhenNotBuilt: false,
                    deleteDirs: true,
                    disableDeferredWipeout: true,
                    notFailBuild: true,
                    patterns: [[pattern: ".aws", type: "INCLUDE"]])
        }
    }
}